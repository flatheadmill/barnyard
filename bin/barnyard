#!/usr/bin/env zsh

# For the readme...
#
# * You can get the actual module using `_module`, while `module` is the name.
# * `o_barnyard[barnyard]` is the repository and `o_barnyard[archive]` is the
# directory where we extracted the barnyard version.

# TODO Get stdout and `journalctl` date formats identical. (Probably locale
# based.)

#

# Now I want the ability to export the barnyard functions.
#
# This means `barnyard apply`, `barnyard funcs`, `barnyard whever`.
#
# But we don't want to get into serious argument parsing, do we?

function ___ {
}

# TODO Cannot remember all that I wanted to do with property names, but it seems
# like all I need are the directives and based64 encoding. Maybe include is
# something like `@/modules/postgresql/common`.
export BARNYARD_PATH=${${0:a}%/*}

BARNYARD_VERSION=0.0.0
BARNYARD_RELEASE_DATE='January 1, 1970'

function zsh_parse_arguments {
    typeset error=${${1:-}:q} context=${${2:-}:q}
    shift 2

    # TODO -hfoo will become $o_help and then set -- foo
    typeset -A arguments declared localized arg
    typeset regex short long remainder

    while :
    do
        case "$1" in
            # Indicates send of parser arguments.
            -- )
                shift
                break
                ;;
            # Parse program arguments.
            * )
                # Check for a variable name or else we'll generate an `o_` prefixed one.
                if [[ "$1" =~ ^([^,]+)=(.*)$ ]]; then
                    arg[variable]="$match[1]"
                    pattern="$match[2]"
                else
                    arg[variable]=
                    pattern="$1"
                fi

                shift

                regex='^([a-zA-Z0-9]{0,2}),([^%@:#!]*)([%@:#!]?)(.*)$'
                [[ "$pattern" =~ $regex ]] || { printf '%s definition %q' $error "$1"; return; }
                short=${match[1]} long=${match[2]} arg[kind]=${match[3]} arg[remainder]="${match[4]}"

                [[ -z "$arg[variable]" ]] && {
                    [[ -z "$long" ]] && arg[variable]=o_$short || arg[variable]=o_${long:gs/-/_/}
                }

                case "x$arg[kind]" in
                    x@ )
                        arg[type_flag]=' -a'
                        arg[type_name]='array-local'
                        ;;
                    x% )
                        arg[type_flag]=' -A'
                        arg[type_name]='association-local'
                        [[ -z "$arg[remainder]" ]] && arg[remainder]==
                        ;;
                    * )
                        arg[type_flag]=' '
                        arg[type_name]='scalar-local'
                        ;;
                esac

                [[ -n "$long" ]] && arguments[--${long}]="${(@qq)${(@kv)arg}}"
                [[ -n "$short" ]] && arguments[-${short}]="${(@qq)${(@kv)arg}}"

                [[ "declared[$arg[variable]]" = 1 ]] && continue
                case x"$arg[kind]" in
                    x | x\! | x\# )
                        printf '{ [[ ! -v %s ]] || [[ "${(t)%s}" != "scalar-local" ]] } && local %s\n' \
                            "$arg[variable]" "$arg[variable]" "$arg[variable]"
                        case "x$arg[kind]" in
                            x | x\# )
                                printf '%s=0\n' "$arg[variable]"
                                ;;
                            * )
                                printf '%s=1\n' "$arg[variable]"
                                ;;
                        esac
                        ;;
                esac
                declared[$arg[variable]]=1
                ;;
        esac
    done

    typeset -a args=( "$@" ) split
    typeset i=1 arged flag negated delimiter
    while (( i <= ${#args[@]} )); do
        negated=0
        case "${args[$i]}" in
            - )
                break
                ;;
            -- )
                let i=i+1
                break
                ;;
            --no-* )
                regex='^--no-([a-zA-Z0-9][-a-zA-Z0-9]*)$'
                if [[ "${args[$i]}" =~ $regex ]] && [[ -n "${arguments[--$match[1]]}" ]]; then
                    arg=( "${(@Q)${(@z)${arguments[--$match[1]]}}}" )
                    if [[ $arg[kind] == '!' ]]; then
                        args[$i]="--${match[1]}"
                        negated=1
                    fi
                fi
                ;&
            --* )
                arged=0
                regex='^(--[-a-zA-Z0-9]+)(=.*)?$'
                [[ "${args[$i]}" =~ $regex ]] || { printf '%s unknown %s %q\n' $error $context "$1"; return; }
                long="${match[1]}"
                if [[ "$match[2]" != '' ]]; then
                    arged=1
                    args[i]=${match[2]:1}
                else
                    ((i++))
                fi
                flag=$long
                [[ -z "${arguments[$long]}" ]] && { printf '%s unknown %s %q\n' $error $context "$long"; return; }
                arg=( "${(@Q)${(@z)${arguments[$long]}}}" )
                ;;
            -* )
                arged=0
                # NB Oh, it's one or for an array, but for strings we start from zero. I see.
                flag=${args[$i]:0:2}
                [[ -z "${arguments[$flag]}" ]] && { printf '%s unknown %s %q\n' $error $context "$flag"; return; }
                arg=( "${(@Q)${(@z)${arguments[$flag]}}}" )
                case "x$arg[kind]" in
                    x: | x@ )
                        if [[ ${#args[$i]} -eq 2 ]]; then
                            let i=i+1
                        else
                            args[i]=${args[$i]:2}
                        fi
                        ;;
                    * )
                        # TODO If you have args a b and c and you get -abd what
                        # does getopt do? Seems to just append...
                        if [[ ${#args[i]} -gt 2 ]]; then
                            args[i]="-${args[i]:2}"
                        else
                            ((i++))
                        fi
                        [[ "$arg[kind]" = '!' ]] && negated=1
                        ;;
                esac
                ;;
            *)
                break
                ;;
        esac
        case "x$arg[kind]" in
            x | x\# | x\! )
                (( $arged )) && { printf '%s no_args %s %q\n' $error $context "$flag"; return; }
                ;;
        esac
        case "x$arg[kind]" in
            x )
                printf 'local %s=1\n' "$arg[variable]"
                ;;
            x\# )
                printf '((%s++))\n' "$arg[variable]"
                ;;
            x\! )
                if (( $negated )); then
                    printf '%s=0\n' "$arg[variable]"
                else
                    printf '%s=1\n' "$arg[variable]"
                fi
                ;;
            * )
                (( i <= ${#args[@]} )) || { printf '%s arg_missing %s %q\n' $error $context "$flag"; return; }
                if [[ "$localized[$arg[variable]]" != 1 ]]; then
                    printf '{ [[ ! -v %s ]] || [[ "${(t)%s}" != %s ]] } && typeset%s %s\n' \
                        "$arg[variable]" "$arg[variable]" \
                        "$arg[type_name]" "$arg[type_flag]" "$arg[variable]"
                fi
                case "x$arg[kind]" in
                    x: )
                        printf '%s=%s\n' "$arg[variable]" "${args[$i]:q}"
                        ((i++))
                        ;;
                    * )
                        [[ "$localized[$arg[variable]]" != 1 ]] && printf '%s=()\n' "$arg[variable]"
                        case "x$arg[kind]" in
                            x@ )
                                printf '%s+=(%s)\n' "$arg[variable]" "${args[$i]:q}"
                                ((i++))
                                ;;
                            x% )
                                delimiter=$arg[remainder]
                                split=("${(@ps:$delimiter:)args[2]}")
                                if (( ${#split[@]} == 1 )); then
                                    (( i + 1 <= ${#args[@]} )) || {
                                        print -R "$error $context arg_missing ${flag:q}"; return;
                                    }
                                    printf '%s+=(%s %s)\n' "$arg[variable]" "${args[$i]:q}" "${args[$i+1]:q}"
                                    ((i+=2))
                                else
                                    printf '%s+=(%s %s)\n' "$arg[variable]" \
                                        "${split[1]:q}" "${(pj:$delimiter:)${(@)split[2,-1]}}"
                                    ((i++))
                                fi
                                ;;
                        esac
                        ;;
                esac
                localized[$arg[variable]]=1
                ;;
            * )
        esac
    done

    (( i ==  ${#args[@]} + 1 )) && printf 'set --\n' || printf 'set -- %s\n' "${(j: :)${(@qq)${(@)args[$i,-1]}}}"
}

function barnyard_argument_error {
    typeset cmd=${1:-} kind=${2:-}
    shift 2
    cmd=${${cmd/#root/barnyard}//_/ }
    case "$kind" in
        arg_missing )
            abend 'missing argument `%s` to `%s`' "$1" "$cmd"
            ;;
        * )
            print -u 2 -R -- "$cmd" "$kind" "$@"
            ;;
    esac
    exit 1
}

___ barnyard_common ___
typeset -A PRIORITY

PRIORITY[panic]=0
PRIORITY[alert]=1
PRIORITY[crit]=2
PRIORITY[err]=3
PRIORITY[warn]=4
PRIORITY[notice]=5
PRIORITY[info]=6
PRIORITY[debug]=7

if [[ -n "$BARNYARD_LOG_LEVEL" ]]; then
    [[ -z "${PRIORITY[$BARNYARD_LOG_LEVEL]}" ]] && abend "invalid log level %s" "$BARNYARD_LOG_LEVEL"
else
    BARNYARD_LOG_LEVEL=info
fi

# An environment variable so someone can set this in their shell.
export BARNYARD_LOG_LEVEL

function barnyard_string_resource {
    awk '/^___ '$1' ___/{flag=1;next}/^___/{flag=0}flag' "$BARNYARD_PATH/barnyard"
}

function barnyard_write_config {
    typeset map=${1:-} file=${2:-}
    typeset -a fields
    for key value in "${(@kv)${(P)map}}"; do
        fields+=("${key}=${value}")
    done
    print "${(j:\n:)fields}" > "$file"
}

function barnyard_get_array {
    [[ -n "${${(P)1}[$2]}" ]] && : ${(PA)3::=${(@QA)${(@z)${(P)1}[$2]}}}
}

function barnyard_get_array_redux {
    if [[ -n "${${(P)1}[$2]}" ]]; then
        : ${(PA)3::=${(@Q)${(@z)${(P)1}[$2]}}}
    else
        typeset -a empty=()
        : ${(PA)3::=${empty[@]}}
    fi
}

function barnyard_extract {
    typeset branch=${1:-} destination=${2:-} good
    good=$(git -C "${o_barnyard[repository]}" log -n 1 --format='%G?' $branch) ||
        abend 'git log unable to verify signature'
    case $good-${o_check_signature:-1} in
        G-1 | *-0 )
            mkdir -p $destination
            function {
                setopt localoptions pipefail
                git -C "$o_barnyard[repository]" archive $branch | tar -C "$destination" -x
            } || abend 'unable to extract %s' ${(qqq)branch}
            ;;
        * )
            abend 'invalid signature'
            ;;
    esac
}

function barnyard_read_config_ {
    typeset file=${2:-} regex='^([^+=]+)(\+?=)(.*)$' line
    shift 2
    while [[ $# -ne 0 ]]; do
        barnyard_read_config[$1]=${2:-}
        shift 2
    done
    typeset -a array
    while read -r line; do
        [[ "$line" =~ $regex ]] || abend bad_config "$config"
        typeset key=$match[1] element_type=$match[2] value=$match[3]
        case "$element_type" in
            += )
                if (( ${+barnyard_read_config[$key]} )); then
                    array=("${(@Q)${(@z)barnyard_read_config[$key]}}")
                else
                    array=()
                fi
                array+=("$value")
                barnyard_read_config[$key]="${(@qq)${array[@]}}"
                ;;
            = )
                barnyard_read_config[$key]="$value"
                ;;
        esac
    done < "$file"
}

function barnyard_read_config {
    [[ $(( $# % 2 )) == 0 ]] || abend bad_argument_count
    typeset -A barnyard_read_config
    barnyard_read_config_ "$@"
    : ${(PA)${1:-reply}::=${(@kv)barnyard_read_config}}
}

function abend {
    log priority=err "$@"
    exit 1
}

# Appears as though the last time I visted this, I'd given up on the notion of
# logging each line to systemd with an appropriate PRIORITY since we are going
# to run under systemd and our standard out and standard err are going to go to
# systemd-journal anyway, so we would end up having two forms of logging,
# whatever is coming out of standard I/O and whatever we are explicitly logging
# with the systemd-journal.

# We see now that Loki has a parser for the logfmt logging format which is
# probably our best bet for getting the logging level. We can set alerts on a
# query winnowed on the purpose of a virtual machine to look for log entries
# that match a particular systemd unit and then parse for the log level. Should
# be performant since we'll use purpose and unit as indicies.

# Difficult to determine how to do structure with logs and the degree to which
# you should label logs with systemd-journal when everything is supposed to be
# shipped off to a different index. At some point I was attempting to get the
# most out of systemd-journal by creating unique message ids. That's got to come
# in handy some day, right? The ability to track a message over time as its line
# number changes, that's useful, right?

# No. Doesn't seem to be the way things work. Really just want to see what's
# happening in our log database with cursory pattern matching. Not trying to
# construct a UML diagram of my Zsh scripts.

# Arguments are an optional syslog priority, followed by optional key value
# pairs followed by a printf statement.

# log <level> <name=value> <format> <format-args>
function log {
    typeset priority level ordered=() order=( level )
    typeset -A fields

    # The first argument
    if [[ -z "${PRIORITY[$1]:-}" ]]; then
        priority=info
    else
        priority=$1
        shift
    fi

    # Create a template message. We do want level, module and message first
    # since that would probably be easiest to read in console spew.
    typeset message_index
    if (( ${+o_barnyard[module]} )); then
        fields=( level $priority module "${o_barnyard[module]:-}" )
    else
        fields=( level $priority )
    fi

    # Escape the values of the key value pair. This will stop at the first
    # argument that does not have an equal sign. You can use `--` to address
    # ambiguities.
    typeset name value
    while [[ ${1:-} =~ ([^=]+)=(.*) ]]; do
        shift
        name=${match[1]}
        value=${match[2]}
        value=${value//\\/\\\\}
        value=${value//\"/\\\"}
        if [[ "$value" =~ [\ \\] ]]; then
            value="\"$value\""
        fi
        order+=( $name )
        fields[$name]="$value"
    done

    # You can use `--` to indicate an end of key value pairs. This would allow
    # for a log line that formats out to `msg=info` using `-- info` as well as
    # allow for a message that has an equal sign in it.
    if [[ ${1:-} == '--' ]]; then
        shift
    fi

    # Check if the message is at our logging level.
    if (( $PRIORITY[$priority] > $PRIORITY[$BARNYARD_LOG_LEVEL] )); then
        return
    fi

    # Resist the urge to DRY here, it is an intentional loop unroll to repeat
    # the escaping of the message instead of first creating an array of key
    # value pairs including the message and then escape all the pairs.
    if (( $# )); then
        typeset format="$1" message
        shift
        printf -v message "$format" "$@"
        message=${message//\\/\\\\}
        message=${message//\"/\\\"}
        if [[ "$message" =~ [\ \\] ]]; then
            message="\"$message\""
        fi
        order+=( msg )
        fields[msg]=$message
    fi

    for name in "${(@kv)order}"; do
        (( ${+fields[$name]} )) || continue
        ordered+=( "$name=$fields[$name]" )
        unset "fields[$name]"
    done

    # When we see this environment variable, it indicates that we are running
    # inside systemd and we do not have to add date context, but I can't
    # remember if it is something we set, or if it something that systemd sets.
    # If it was oures, it would probably be prefixed with `BARNYARD_`.
    if [[ -v INVOCATION_ID ]]; then
        printf '%s\n' "${(j: :)ordered}"
    else
        printf '%s barnyard[%s]: %s\n' "$(date --rfc-3339=s | sed 's/+.*//')" $priority "${(j: :)${(@)ordered:1}}"
    fi
}

function barnyard_display {
    if [[ -z "$o_barnyard[quiet]" ]]; then
        cat /dev/stdin 2>&1
    else
        cat /dev/stdin > /dev/null
    fi
}

function barnyard_divider {
    (( $o_barnyard[quiet] )) && return
    typeset label="$1"
    typeset bar=--------------------------------------------------------------------------------
    shift
    typeset prefix="------- $label "
    print -R "$bar"
    print -R "$prefix ${bar:0:$(( ${#bar} - ${#prefix} - 1 ))}"
    print -R "$bar"
}

function barnyard_heredoc {
    typeset __barnyard_heredoc__chomped__=()
    if (( $# )); then
        __barnyard_heredoc__chomped__+=( -v "$1" )
    fi
    __barnyard_heredoc__chomped__+=( '%s' )
    function {
        typeset spaces=65536 leading='^( *)([^[:space:]])' IFS='' line lines=() chomped=()
        while read -r line; do
            lines+=( "$line" )
            if [[ "$line" =~ $leading && "${#match[1]}" -lt "$spaces" ]]; then
                spaces="${#match[1]}"
            fi
        done
        for line in "${(@)lines}"; do
            chomped+=( "${line[spaces + 1,-1]}" )
        done
        __barnyard_heredoc__chomped__+=( "${(pj:\n:)chomped}" )
    }
    printf "${(@)__barnyard_heredoc__chomped__}"
}

function barnyard_quotedoc {
    if (( $# )); then
        IFS= read -rd '' "$1" < <(barnyard_quotedoc)
        : ${(P)1::=${${(P)1}%[[:space:]]}}
    else
        typeset heredoc
        barnyard_heredoc heredoc
        eval "$({
            print 'cat <<EOF'
            printf '%s\n' "$heredoc"
            print EOF
        })"
    fi
}

function barnyard_run_ {
    typeset -A o_module barnyard
    typeset module program code applied=() diffs=() args=()

    barnyard=( "${(@kv)o_barnyard}" )

    module=${1:-}
    args=( "${@:2}" )
    program=${module#*/}
    module=${module%%/*}
    [[ $program = $module ]] && program=apply.zsh

    # ERROR Now we are stomping the parent context when we run `barnyard_always`.
    barnyard[configuration]="$barnyard[archive]/conf/machines/$barnyard[hostname]/$module"
    barnyard[resources]="$barnyard[archive]/conf/resources/$barnyard[hostname]"
    barnyard[age]="$(<"$barnyard[archive]/conf/age/$barnyard[hostname]")" || \
        abend module=$module hostname="$barnyard[hostname]" 'age key missing for $%s' "$barnyard[hostname]"

    o_module=()

    [[ -e "$barnyard[configuration]" ]] || abend 'no configuration for module %s' "$module"
    barnyard_read_config o_module "$barnyard[configuration]" _apply once _module "$module"

    mkdir -p /var/lib/barnyard/applied

    applied=()
    diffs=()

    [[ -e "/var/lib/barnyard/applied/$module" ]]
    typeset ran=$(( ! $? ))
    case "$o_barnyard[always]-$o_module[_apply]" in
        yes-* | *-always )
            log run=1 ran=$ran module="$module" program="$program" apply=always msg= 'check dirty'
            ;;
        *-once )
            if (( $ran )); then
                log run=0 ran=1 module="$module" program="$program" apply=once msg= 'check dirty'
                return
            fi
            log run=1 ran=0 module="$module" program="$program" apply=once msg= 'check dirty'
            ;;
        *-diff )
            if (( $ran )); then
                read -r -A applied < "/var/lib/barnyard/applied/$module"
                if [[ "$applied[1]" = "$o_barnyard[sha1]" ]]; then
                    log run=0 ran=1 module="$module" program="$program" apply=diff msg= 'check dirty'
                    return
                fi
                barnyard_get_array o_module _diff diffs
                diffs+=("machines/$barnyard[hostname]/$module")
                git -C "$o_barnyard[repository]" diff --quiet "$applied[1]" "$barnyard[sha1]" -- "${diffs[@]}"
                if git -C "$o_barnyard[repository]" diff --quiet "$applied[1]" "$barnyard[sha1]" -- "${diffs[@]}"; then
                    log run=0 ran=1 module="$module" program="$program" apply=diff msg= 'check dirty'
                    return
                fi
                log run=1 ran=1 module="$module" program="$program" apply=diff msg= 'check dirty'
            else
                log run=1 ran=0 module="$module" program="$program" apply=diff msg= 'check dirty'
            fi
            ;;
        *-never )
            log run=0 ran=$ran module="$module" program="$program" apply=diff msg= 'check dirty'
            return
            ;;
    esac

    (( barnyard[dry_run] )) && return

    barnyard[module]="$module"
    barnyard[source]="${barnyard[archive]}/code/modules/$o_module[_module]/$program"
    export __BARNYARD_O_BARNYARD__="${(@qq)${(@kv)barnyard}}"
    export __BARNYARD_O_MODULE__="${(@qq)${(@kv)o_module}}"
    barnyard_string_resource barnyard_apply > "$BARNYARD_TEMP/apply"
    zsh "$BARNYARD_TEMP/apply" "${args[@]}"
    code=$?

    if (( $code )); then
        log err code=$code module="$module" 'module %s exited %d' "$module" $code
        return $code
    fi

    if [[
        "$o_barnyard[repository]" = /var/lib/barnyard/repository && \
        "$program" = apply.zsh && \
        "$o_barnyard[always]" = no \
    ]]; then
        mkdir -p /var/lib/barnyard/applied
        log module="$module" "marking module %s as applied" "$module"
        git -C "$o_barnyard[repository]" log -n 1 --format='%H %at' "$barnyard[sha1]" > "/var/lib/barnyard/applied/$module"
    fi
}
___
function barnyard_version_check {
    [[ -v o_version ]] && {
        [[ "$o_version" = "$BARNYARD_VERSION" ]] || abend "local=$o_version" remote=$BARNYARD_VERSION 'version mismatch, please run upgrade'
    }
}

function barnyard_order_modules {
    mkdir -p "/var/lib/barnyard/sha1"
    typeset -A ordered o_module o_program o_order
    typeset -a unordered ordered
    typeset configuration operation module program

    barnyard_read_config o_order "$o_barnyard[archive]/conf/machines/$o_barnyard[hostname]/order"
    barnyard_get_array o_order module ordered

    log info modules="${(j: :)ordered[@]}" 'running modules in order'

    for module in "${(@)ordered}"; do
        barnyard_run_ "$module" || return 1
    done
}

function barnyard_apply {
    typeset module
    export BARNYARD_TEMP
    BARNYARD_TEMP=$(mktemp -d) || abend 'unable to create temporary directory'
    {
        barnyard_version_check
        [[ -e /etc/barnyard/config ]] || abend 'no configuration'
        barnyard_read_config o_barnyard /etc/barnyard/config hostname "$(hostname --long)" quiet $o_quiet "${(@kv)o_barnyard}"

        [[ -v o_ref ]] && o_barnyard[branch]=$o_ref

        git config --global gpg.ssh.allowedSignersFile /dev/null
        export GNUPGHOME=/etc/barnyard/gnupg
        export GIT_SSH_COMMAND='ssh -i /etc/barnyard/id_barnyard -o IdentitiesOnly=yes -o UserKnownHostsFile=/etc/barnyard/known_hosts'
        if [[ "$o_barnyard[repository]" = "/var/lib/barnyard/repository" ]]; then
            # TODO Left over from when some repositories were not mirrored.
            if ! git -C "${o_barnyard[repository]}" config --get --bool remote.origin.mirror > /dev/null; then
                remote=$(git -C "${o_barnyard[repository]}" config --get remote.origin.url)
                rm -rf /var/lib/barnyard/repository
                git clone --mirror "$remote" /var/lib/barnyard/repository
            fi

            if (( $o_barnyard[fetch] ));then
                git -C "$o_barnyard[repository]" remote update --prune ||
                    abend 'fatal: cannot update remote'
            fi

            o_barnyard[sha1]=$(git -C ${o_barnyard[repository]} rev-parse $o_barnyard[branch])

            o_barnyard[archive]=$BARNYARD_TEMP/run
            barnyard_extract $o_barnyard[branch] $BARNYARD_TEMP/run/conf
            o_barnyard[code]=$(<$BARNYARD_TEMP/run/conf/code)
            typeset -A o_machine
            barnyard_read_config o_machine $BARNYARD_TEMP/run/conf/machines/$o_barnyard[hostname]/machine
            if (( ${+o_machine[code]} )); then
                o_barnyard[code]=$o_machine[code]
            fi
            barnyard_extract $o_barnyard[code] $BARNYARD_TEMP/run/code

            if (( $# )); then
                for module in "$@"; do
                    barnyard_run_ $module || exit 1
                done
            else
                [[ "$o_barnyard[always]" = no ]] || abend 'always requires specific modules to run'
                typeset -a modules
                modules=("${(@f)$(ls "${o_barnyard[archive]}/conf/machines/${o_barnyard[hostname]}")}")
                barnyard_order_modules "${modules[@]}"
            fi
        else
            [[ -n "$SUDO_USER" ]] || abend 'must run through sudo'
            # TODO Not a good check, check harder.
            [[ -d "$o_barnyard[repository]" ]] ||
                abend 'no barnyard at path %s' "${(qqq)o_barnyard[repository]}"

            typeset barnyard_user
            barnyard_user=$(stat -c '%U' "$(git -C "${o_barnyard[repository]}/conf" rev-parse --git-dir)/index") ||
                abend 'not a git repo %s' "$o_barnyard[repository]/conf"

            [[ "$barnyard_user" == $SUDO_USER ]] ||
                abend 'sudo user %s does not own %s' ${(qqq)SUDO_USER} ${(qqq)o_barnyard[repository]}

            o_barnyard[archive]="$BARNYARD_TEMP/run"
            mkdir -p "$BARNYARD_TEMP/run"
            cp -R "$o_barnyard[repository]"/* "$BARNYARD_TEMP/run"
            o_barnyard[repository]="$o_barnyard[repository]/conf"
            for module in "$@"; do
                barnyard_run_ $module || exit 1
            done
        fi
    } always {
        [[ -n "$BARNYARD_TEMP" && -d "$BARNYARD_TEMP" ]] && rm -rf "$BARNYARD_TEMP"
    }
}

function barnyard:always {
    typeset o_repository=/var/lib/barnyard/repository
    integer o_check_signature=1
    eval "$(args -@ v,version -d r,repository -b q,quiet h,help f,fetch -d! c,check-signature -- "$@")"
    typeset -A o_barnyard=( always yes repository ${o_repository:A} fetch $o_fetch )
    barnyard_apply "$@"
}

function barnyard:apply {
    typeset o_repository=/var/lib/barnyard/repository
    integer o_check_signature=1
    eval "$(args -@ v,version R,ref -d r,repository -b d,dry-run q,quiet h,help -d! c,check-signature -- "$@")"
    [[ -v o_ref && $o_dry_run = 0 ]] && abend 'cannot specify ref except for dry-run'
    (( $# )) && abend 'barnyard apply takes no positional arguments'
    typeset -A o_barnyard=( always no repository "${o_repository:A}" dry_run $o_dry_run fetch 1 )
    barnyard_apply "$@"
}

function barnyard_systemd {
    # We're going to only be interested in log entries emitted after we start
    # our unit, so we capture the journal cursor now.
    [[ "$(journalctl -q -e -n 1 -o verbose)" =~ ^.*\\[(.*)\\] ]]
    typeset cursor=$match[1]

    # Tail the barnyard logs from this point if we successfully start the unit.
    typeset since="$(date --iso-8601=seconds | sed -e 's/T/ /' -e 's/\+.*//')"

    # Attempt to start the unit. The `--collect` argument will delete the
    # transient unit regardless of exit status. We set an environment variable
    # that we'll use to assert that the running unit is the unit we ran.
    systemd-run --setenv BARNYARD_PID=$$ --collect --unit barnyard $BARNYARD_PATH/barnyard "$@" || exit 1

    # Grap a snapshot of the properties of the currently running unit.
    typeset line
    typeset -A properties
    typeset -a split
    while read -r line; do
        split=( "${(@s:=:)line}" )
        properties[$split[1]]="$split[2]"
    done < <(systemctl show --property MainPID --property InvocationID barnyard)

    # Check that there is a barnyard unit running.
    (( $properties[MainPID] )) || abend 'barnyard exited awfully quick'

    # Assert that we are the ones who ran it.
    # https://askubuntu.com/questions/978711/how-do-i-split-a-proc-environ-file-in-separate-lines
    if [[ $(xargs -0 -L1 -a "/proc/${properties[MainPID]}/environ" | awk -v pid=$$ -F= '$1 == "BARNYARD_PID" && $2 == pid { print "true" }') = true ]] || \
        abend 'some else started this barnyard unit'

    # Start tailing the unit.
    journalctl --quiet --cursor "$cursor" --no-hostname --no-pager -fe --unit barnyard &
    typeset jctl=$!
    trap "kill $jctl" EXIT

    # Here we block. We tail `journalctl` until we see an exit message, either
    # success or failure. It will be a single line so we pipe to head to get the
    # line. When head exits this pipeline exits. Likely the user will have seen
    # the final messages on in their terminal as well.
    journalctl --quiet --cursor "$cursor" --follow --unit barnyard \
        INVOCATION_ID=$properties[InvocationID] \
        MESSAGE_ID=7ad2d189f7e94e70a38c781354912448 \
        MESSAGE_ID=98e322203f7a4ed290d09fe03c09fe15 | \
    head -n 1 > /dev/null

    # We get the exit message again, this time to determine the exit code.
    typeset -A outcome
    while read -r line; do
        [[ "$line" =~ ^([^=]+)=(.*)$ ]] || continue
        outcome[$match[1]]=$match[2]
    done < <(
        journalctl --quiet --cursor "$cursor" --unit barnyard --output export --output-fields EXIT_STATUS,MESSAGE,MESSAGE_ID \
            INVOCATION_ID=$properties[InvocationID] \
            MESSAGE_ID=7ad2d189f7e94e70a38c781354912448 \
            MESSAGE_ID=98e322203f7a4ed290d09fe03c09fe15
    )

    # If it was an error message, return the error exit code.
    # TODO `return` is unnecessary, isn't it?
    [[ $outcome[MESSAGE_ID] = 98e322203f7a4ed290d09fe03c09fe15 ]] && return $outcome[EXIT_STATUS]
}

function command_barnyard_systemd_always {
    eval "$(barnyard_parse_arguments systemd_always v,version: h,help -- "$@")"
    barnyard_version_check
    barnyard_systemd always "$@"
}

function command_barnyard_systemd_apply {
    eval "$(barnyard_parse_arguments systemd_apply d,dry-run v,version: h,help -- "$@")"
    barnyard_version_check
    typeset -a dry_run
    (( $o_dry_run )) && dry_run+=( '--dry-run' )
    barnyard_systemd apply "${(@)dry_run}" "$@"
}

function command_barnyard_systemd {
    eval "$(barnyard_parse_arguments systemd v,version: h,help -- "$@")"
    barnyard_next_command barnyard_systemd "$@"
}

# Could argue that the repository should never change, but it comes from outside
# and so yes, it could change. You might want to rename your repository, why
# not? It's not immutable like the age or gpg key.

function barnyard:clone {
    eval "$(args 'r,repository' v,version -b h,help -- "$@")"
    barnyard_version_check
    [[ -v o_repository ]] || abend 'a git repository url is required'
    banner 'clone'
    {
        { try show || tried 'no barnyard ssh key'; } <<'        EOF'
            [[ -e /etc/barnyard/id_barnyard ]]
        EOF
        { try show || tried 'no barnyard "known_hosts" file'; } <<'        EOF'
            [[ -e /etc/barnyard/known_hosts ]]
        EOF
        { try show || tried; } <<'        EOF'
            export GIT_SSH_COMMAND='ssh -i /etc/barnyard/id_barnyard -o IdentitiesOnly=yes -o UserKnownHostsFile=/etc/barnyard/known_hosts'
        EOF
        try show rm -rf /var/lib/barnyard/repository || tried
        { try show -f "${o_repository%#*}" || tried; } <<'        EOF'
            git clone --mirror %q /var/lib/barnyard/repository
        EOF
        { try show -f "${o_repository##*#}" || tried; } <<'        EOF'
            printf 'branch=%s\\n' > /etc/barnyard/config
        EOF
    } always {
        caught
    } > >(indent)
    exit

}

function barnyard:commit {
    eval "$(args v,version -b h,help -- "$@")"
    barnyard_version_check
    ( cd /var/lib/barnyard/commit && tar -czf - * | base64 )
}

function barnyard:gpg:trust {
    eval "$(args p,fingerprint v,version -b h,help -- "$@")"
    barnyard_version_check
    [[ -v o_fingerprint ]] || abend 'a GPG public key fingerprint is required'
    banner 'trust GPG fingerprint'
    {
        { try show || tried 'must be run as root'; } <<'        EOF'
            (( $EUID == 0 ))
        EOF
        { try show -f $o_fingerprint || tried; } <<'        EOF'
            GNUPGHOME=/etc/barnyard/gnupg gpg --batch --yes --sign-key %q
        EOF
        { try show || tried; } <<'        EOF'
            GNUPGHOME=/etc/barnyard/gnupg gpg --list-keys
        EOF
    } always {
        caught
    } > >(indent)
}

# Here we add a gpg key. We also need a function to remove a key. We could use
# a Barnyard module to remove a key, but then the user has to have one, write
# one and if a key was compromised they'd want to remove it without running
# Barnyard, because Barnyard could not be trusted until the key was revoked.

function barnyard:gpg:import {
    eval "$(args f,file v,version -b h,help -- "$@")"
    barnyard_version_check
    [[ -v o_file ]] || abend 'GPG key file is required'
    typeset gpg_key
    banner 'add GPG signing key'
    {
        { try show || tried 'must be run as root'; } <<'        EOF'
            (( $EUID == 0 ))
        EOF
        if [[ $o_file = - ]]; then
            try show eval 'gpg_key=$(cat)' || tried
        else
            {
                try show -f $o_file || tried 'gpg key file does not exist';
            } <<'            EOF'
                [[ -e %q ]]
            EOF
            { try show -f $o_file || tried; } <<'            EOF'
                gpg_key=$(<%q)
            EOF
        fi
        { try show || tried; } <<'        EOF'
            GNUPGHOME=/etc/barnyard/gnupg gpg --import <(printf %s "$gpg_key")
        EOF
        { try show || tried; } <<'        EOF'
            GNUPGHOME=/etc/barnyard/gnupg gpg --list-keys
        EOF
    } always {
        caught
    } > >(indent)
}

function barnyard:gpg {
    eval "$(args -b h,help -- "$@")"
    delegate "$@"
}

function barnyard:prepare {
    eval "$(args h,help -- "$@")"
    typeset tmp; tmp=$(mktemp -d)
    {
        pushd $tmp
        banner 'git'
        {
            try show git --version || tried
        } always {
            caught
        } > >(indent)
        banner 'age'
        {
            try show mkdir -p /etc/barnyard || tried
            try show age --version || tried
            try show age-keygen --version || tried
            { try show || tried; } <<'            EOF'
                [[ -e /etc/barnyard/age ]] || age-keygen -o /etc/barnyard/age
            EOF
            try show mkdir -p /var/lib/barnyard/commit/age || tried
            { try show || tried; } <<'            EOF'
                grep '^# public key: ' /etc/barnyard/age |
                    sed 's/# public key: //' |
                    tee /var/lib/barnyard/commit/age/$(hostname --long)
            EOF
        } always {
            caught
        } > >(indent)
        banner 'gpg'
        {
            try show gpg --version || tried
            try show eval 'export GNUPGHOME=/etc/barnyard/gnupg' || tried
            try show eval 'print $GNUPGHOME' || tried
            { try show || tried; } <<'            EOF'
                ( umask 077 && mkdir -p /etc/barnyard/gnupg )
            EOF
            { try show || tried; } <<'            EOF'
                cat <<EOF | tee key_details
                %echo Generating a basic OpenPGP key
                Key-Type: RSA
                Key-Length: 2048
                Subkey-Type: RSA
                Subkey-Length: 2048
                Name-Real: $(hostname --long)
                Name-Comment: Root Personal Key
                Name-Email: user@$(hostname --long)
                Expire-Date: 0
                %no-ask-passphrase
                %no-protection
                # Do a commit here, so that we can later print "done" :-)
                %commit
                %echo done
                EOF
            EOF
            { try show || tried; } <<'            EOF'
                gpg --list-keys $(hostname --long) || gpg --verbose --batch --gen-key key_details
            EOF
            try show gpg --list-keys || tried
        } always {
            caught
        } > >(indent)
    } always {
        popd
        [[ -d $tmp ]] && rm -rf $tmp
    }
}

# We could transfer this age encrypted, but we assume it is comming from
# `barnctl` over SSH or at the very least from a file on the filesystem of the
# host machine.

function barnyard:ssh:known-hosts {
    eval "$(args v,version f,file -b h,help -- "$@")"
    barnyard_version_check
    [[ -v o_file ]] || abend 'a "known_hosts" file is required'
    typeset known_hosts
    banner 'set SSH known hosts'
    {
        { try show || tried 'must be run as root'; } <<'        EOF'
            (( $EUID == 0 ))
        EOF
        if [[ $o_file = - ]]; then
            try show eval 'known_hosts=$(cat)' || tried
        else
            {
                try show -f $o_file || tried '"known_hosts" file does not exist';
            } <<'            EOF'
                [[ -e %q ]]
            EOF
            { try show -f $o_file || tried; } <<'            EOF'
                known_hosts=$(<%q)
            EOF
        fi
        try show rm -f /etc/barnyard/id_barnyard || tried
        { try show || tried; } <<'        EOF'
            printf '%s\n' $known_hosts > /etc/barnyard/known_hosts
        EOF
        { try show || tried; } <<'        EOF'
            cat /etc/barnyard/known_hosts
        EOF
    } always {
        caught
    } > >(indent)
}

function barnyard:ssh:private-key {
    eval "$(args v,version f,file -b h,help -- "$@")"
    barnyard_version_check
    [[ -v o_file ]] || abend 'key file is required'
    typeset key
    banner 'set private SSH key'
    {
        { try show || tried 'must be run as root'; } <<'        EOF'
            (( $EUID == 0 ))
        EOF
        if [[ $o_file = - ]]; then
            try show eval 'key=$(cat)' || tried
        else
            { try show -f $o_file || tried 'key file does not exist'; } <<'            EOF'
                [[ -e %q ]]
            EOF
            { try show -f $o_file || tried; } <<'            EOF'
                file=$(<%q)
            EOF
        fi
        try show rm -f /etc/barnyard/id_barnyard || tried
        { try show || tried; } <<'        EOF'
            ( umask 077 && printf '%s\n' $key > /etc/barnyard/id_barnyard )
        EOF
        { try show || tried; } <<'        EOF'
            ssh-keygen -lf /etc/barnyard/id_barnyard
        EOF
    } always {
        caught
    } > >(indent)
}

function barnyard:ssh {
    eval "$(args -b h,help -- "$@")"
    delegate "$@"
}

function barnyard:version {
    eval "$(args -b h,help -- "$@")"
    print $BARNYARD_VERSION
}

# Unlike other utilities where you've done this, `barnyard` will only ever run
# compiled unless you are doing development on a deployed machine. It does not
# have to run on the client machine.
function barnyard:compile {
    eval "$(args -s v,version d,date -- "$@")"
    # TODO Regular expression checking.
    if [[ -v o_version ]]; then
        BARNYARD_VERSION=$o_version
    fi
    # TODO Regular expression that this is epoch seconds.
    if [[ -v o_date ]]; then
        BARNYARD_RELEASE_DATE=$(TZ=UTC date --date=@$o_date +'%B %-d, %Y')
    fi
    typeset strip='
        /^function {$/{flag=1}
        /^}/&&flag{flag=0;next}
        !flag
    '
    {
        if [[ -v BARNYARD_IS_COMPILED ]]; then
            cat ${ZSH_ARGZERO:A}
        else
            typeset dir=${ZSH_ARGZERO:A:h:h}
            cat $dir/lib/barnyard/header.zsh
            printf '\n'
            awk $strip $dir/lib/barnyard/parse.zsh
            printf '\n\n___ barnyard_include ___\n\n'
            awk $strip $dir/lib/barnyard/heredoc.zsh
            printf '\n'
            awk $strip $dir/lib/barnyard/block.zsh
            printf '\n\n___\n\n'
            awk $strip $dir/lib/barnyard/catch.zsh
            printf '\n'
            awk $strip $dir/lib/barnyard/splat.zsh
            printf '\n'
            cat $dir/bin/barnyard
        fi
    } | sed -e "$(
        printf 's/^BARNYARD_VERSION=.*$/BARNYARD_VERSION=%s/\n' $BARNYARD_VERSION
    )" -e "$(
        printf 's/^BARNYARD_RELEASE_DATE=.*$/BARNYARD_RELEASE_DATE=%s/\n' ${(qqq)BARNYARD_RELEASE_DATE}
    )"
}

function _barnyard_options_error {
    typeset func=${1:-} reason=${2:-} flag=${3:-}
    case $reason in
        required )
            printf '`%s` is a required argument.\n' $flag 1>&2
            exit 1
            ;;
        execute )
            print "here's some help"
            exit
    esac
}

function barnyard_args_error {
    print -u 2 -- "$@"
    exit 1
}

function args {
    parser barnyard_args_error 3 "$@"
    printf '(( $o_help )) && barnyard_usage %s\n' $funcstack[2]
}

function delegate {
    typeset prefix=$funcstack[2]
    (( $# )) || abend 'fatal: %s expects a command argument' ${prefix//:/ }
    typeset delegate=$prefix:$1
    shift
    (( $BARNCTL_COMMANDS[(Ie)$delegate] )) || abend 'fatal: no such command `%s`.' ${delegate//:/ }
    $delegate "$@"
}

function barnyard {
    typeset -xg BARNCTL_COMMANDS=()
    BARNCTL_COMMANDS=(
        "${(@f)$(sed -n 's/^function *\(barnyard:[^:][^ ]*\) *{$/\1/p' ${ZSH_ARGZERO:a})}"
    )
    typeset -A o_block
    typeset dir=${ZSH_ARGZERO:A:h:h}
    if [[ ! -v BARNYARD_IS_COMPILED ]]; then
        source $dir/lib/barnyard/heredoc.zsh
        source $dir/lib/barnyard/block.zsh
        source $dir/lib/barnyard/parse.zsh
    fi
    eval "$(args -b h,help -- "$@")"
    delegate "$@"
}

barnyard "$@"

exit

___ barnyard_apply ___
source <(awk '/^___ barnyard_common ___/{flag=1;next}/^___/{flag=0}flag' < <("$BARNYARD_PATH/barnyard" compile))
source <(awk '/^___ barnyard_include ___/{flag=1;next}/^___/{flag=0}flag' < <("$BARNYARD_PATH/barnyard" compile))

typeset -A o_barnyard=( "${(@Q)${(@z)__BARNYARD_O_BARNYARD__}}" ) o_module=( "${(@Q)${(@z)__BARNYARD_O_MODULE__}}" )
unset __BARNYARD_O_BARNYARD__ __BARNYARD_O_MODULE__

function barnyard_always {
    typeset -A o_registers=( always yes )
    barnyard_run_ "$@"
}

cd "$o_barnyard[archive]"

function {
    typeset -A o_block
    source "$o_barnyard[source]"
}
___
